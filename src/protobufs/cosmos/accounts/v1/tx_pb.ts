// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/accounts/v1/tx.proto (package cosmos.accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { UserOperation, UserOperationResponse } from "./account_abstraction_pb.js";

/**
 * MsgInit defines the Create request type for the Msg/Create RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgInit
 */
export class MsgInit extends Message<MsgInit> {
  /**
   * sender is the address of the sender of this message.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * account_type is the type of the account to be created.
   *
   * @generated from field: string account_type = 2;
   */
  accountType = "";

  /**
   * message is the message to be sent to the account.
   *
   * @generated from field: google.protobuf.Any message = 3;
   */
  message?: Any;

  constructor(data?: PartialMessage<MsgInit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgInit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInit {
    return new MsgInit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInit {
    return new MsgInit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInit {
    return new MsgInit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInit | PlainMessage<MsgInit> | undefined, b: MsgInit | PlainMessage<MsgInit> | undefined): boolean {
    return proto3.util.equals(MsgInit, a, b);
  }
}

/**
 * MsgInitResponse defines the Create response type for the Msg/Create RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgInitResponse
 */
export class MsgInitResponse extends Message<MsgInitResponse> {
  /**
   * account_address is the address of the newly created account.
   *
   * @generated from field: string account_address = 1;
   */
  accountAddress = "";

  /**
   * response is the response returned by the account implementation.
   *
   * @generated from field: google.protobuf.Any response = 2;
   */
  response?: Any;

  constructor(data?: PartialMessage<MsgInitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgInitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "response", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInitResponse {
    return new MsgInitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInitResponse | PlainMessage<MsgInitResponse> | undefined, b: MsgInitResponse | PlainMessage<MsgInitResponse> | undefined): boolean {
    return proto3.util.equals(MsgInitResponse, a, b);
  }
}

/**
 * MsgExecute defines the Execute request type for the Msg/Execute RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecute
 */
export class MsgExecute extends Message<MsgExecute> {
  /**
   * sender is the address of the sender of this message.
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * target is the address of the account to be executed.
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * message is the message to be sent to the account.
   *
   * @generated from field: google.protobuf.Any message = 3;
   */
  message?: Any;

  constructor(data?: PartialMessage<MsgExecute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgExecute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecute {
    return new MsgExecute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecute {
    return new MsgExecute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecute {
    return new MsgExecute().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecute | PlainMessage<MsgExecute> | undefined, b: MsgExecute | PlainMessage<MsgExecute> | undefined): boolean {
    return proto3.util.equals(MsgExecute, a, b);
  }
}

/**
 * MsgExecuteResponse defines the Execute response type for the Msg/Execute RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteResponse
 */
export class MsgExecuteResponse extends Message<MsgExecuteResponse> {
  /**
   * response is the response returned by the account implementation.
   *
   * @generated from field: google.protobuf.Any response = 1;
   */
  response?: Any;

  constructor(data?: PartialMessage<MsgExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteResponse {
    return new MsgExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteResponse | PlainMessage<MsgExecuteResponse> | undefined, b: MsgExecuteResponse | PlainMessage<MsgExecuteResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteResponse, a, b);
  }
}

/**
 * MsgExecuteBundle defines the ExecuteBundle request type for the Msg/ExecuteBundle RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteBundle
 */
export class MsgExecuteBundle extends Message<MsgExecuteBundle> {
  /**
   * bundler defines the entity going through the standard TX flow
   * to execute one or multiple UserOperations on behalf of others.
   *
   * @generated from field: string bundler = 1;
   */
  bundler = "";

  /**
   * operations is the list of operations to be executed.
   *
   * @generated from field: repeated cosmos.accounts.v1.UserOperation operations = 2;
   */
  operations: UserOperation[] = [];

  constructor(data?: PartialMessage<MsgExecuteBundle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgExecuteBundle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bundler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operations", kind: "message", T: UserOperation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteBundle {
    return new MsgExecuteBundle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteBundle {
    return new MsgExecuteBundle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteBundle {
    return new MsgExecuteBundle().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteBundle | PlainMessage<MsgExecuteBundle> | undefined, b: MsgExecuteBundle | PlainMessage<MsgExecuteBundle> | undefined): boolean {
    return proto3.util.equals(MsgExecuteBundle, a, b);
  }
}

/**
 * MsgExecuteBundleResponse defines the ExecuteBundle response type for the Msg/ExecuteBundle RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteBundleResponse
 */
export class MsgExecuteBundleResponse extends Message<MsgExecuteBundleResponse> {
  /**
   * responses is the list of responses returned by the account implementations.
   *
   * @generated from field: repeated cosmos.accounts.v1.UserOperationResponse responses = 1;
   */
  responses: UserOperationResponse[] = [];

  constructor(data?: PartialMessage<MsgExecuteBundleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.MsgExecuteBundleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "responses", kind: "message", T: UserOperationResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteBundleResponse {
    return new MsgExecuteBundleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteBundleResponse {
    return new MsgExecuteBundleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteBundleResponse {
    return new MsgExecuteBundleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteBundleResponse | PlainMessage<MsgExecuteBundleResponse> | undefined, b: MsgExecuteBundleResponse | PlainMessage<MsgExecuteBundleResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteBundleResponse, a, b);
  }
}

