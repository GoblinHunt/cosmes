// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file vsc/permissions/v1/query.proto (package vsc.permissions.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PermissionEntry, Permissions } from "./permissions_pb.js";

/**
 * QueryPermissionRequest is the request type for the Query/Permission RPC
 * method.
 *
 * @generated from message vsc.permissions.v1.QueryPermissionRequest
 */
export class QueryPermissionRequest extends Message<QueryPermissionRequest> {
  /**
   * @generated from field: string permission = 1;
   */
  permission = "";

  constructor(data?: PartialMessage<QueryPermissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.permissions.v1.QueryPermissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPermissionRequest {
    return new QueryPermissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPermissionRequest {
    return new QueryPermissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPermissionRequest {
    return new QueryPermissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPermissionRequest | PlainMessage<QueryPermissionRequest> | undefined, b: QueryPermissionRequest | PlainMessage<QueryPermissionRequest> | undefined): boolean {
    return proto3.util.equals(QueryPermissionRequest, a, b);
  }
}

/**
 * QueryPermissionResponse is the response type for the Query/Permission RPC
 * method.
 *
 * @generated from message vsc.permissions.v1.QueryPermissionResponse
 */
export class QueryPermissionResponse extends Message<QueryPermissionResponse> {
  /**
   * @generated from field: repeated vsc.permissions.v1.PermissionEntry entries = 1;
   */
  entries: PermissionEntry[] = [];

  constructor(data?: PartialMessage<QueryPermissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.permissions.v1.QueryPermissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: PermissionEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPermissionResponse {
    return new QueryPermissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPermissionResponse {
    return new QueryPermissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPermissionResponse {
    return new QueryPermissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPermissionResponse | PlainMessage<QueryPermissionResponse> | undefined, b: QueryPermissionResponse | PlainMessage<QueryPermissionResponse> | undefined): boolean {
    return proto3.util.equals(QueryPermissionResponse, a, b);
  }
}

/**
 * QueryAllPermissionsRequest is the request type for the Query/AllPermissions
 * RPC method.
 *
 * @generated from message vsc.permissions.v1.QueryAllPermissionsRequest
 */
export class QueryAllPermissionsRequest extends Message<QueryAllPermissionsRequest> {
  /**
   * @generated from field: string list_permissions = 1;
   */
  listPermissions = "";

  constructor(data?: PartialMessage<QueryAllPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.permissions.v1.QueryAllPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_permissions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPermissionsRequest {
    return new QueryAllPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPermissionsRequest {
    return new QueryAllPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPermissionsRequest {
    return new QueryAllPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPermissionsRequest | PlainMessage<QueryAllPermissionsRequest> | undefined, b: QueryAllPermissionsRequest | PlainMessage<QueryAllPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPermissionsRequest, a, b);
  }
}

/**
 * QueryAllPermissionsResponse is the response type for the Query/AllPermissions
 * RPC method.
 *
 * @generated from message vsc.permissions.v1.QueryAllPermissionsResponse
 */
export class QueryAllPermissionsResponse extends Message<QueryAllPermissionsResponse> {
  /**
   * @generated from field: vsc.permissions.v1.Permissions permissions = 1;
   */
  permissions?: Permissions;

  constructor(data?: PartialMessage<QueryAllPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.permissions.v1.QueryAllPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: Permissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPermissionsResponse {
    return new QueryAllPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPermissionsResponse {
    return new QueryAllPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPermissionsResponse {
    return new QueryAllPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPermissionsResponse | PlainMessage<QueryAllPermissionsResponse> | undefined, b: QueryAllPermissionsResponse | PlainMessage<QueryAllPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPermissionsResponse, a, b);
  }
}

