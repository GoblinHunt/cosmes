// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/treasury/v1beta1/treasury.proto (package terra.treasury.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the oracle module.
 *
 * @generated from message terra.treasury.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: terra.treasury.v1beta1.PolicyConstraints tax_policy = 1;
   */
  taxPolicy?: PolicyConstraints;

  /**
   * @generated from field: terra.treasury.v1beta1.PolicyConstraints reward_policy = 2;
   */
  rewardPolicy?: PolicyConstraints;

  /**
   * @generated from field: string seigniorage_burden_target = 3;
   */
  seigniorageBurdenTarget = "";

  /**
   * @generated from field: string mining_increment = 4;
   */
  miningIncrement = "";

  /**
   * @generated from field: uint64 window_short = 5;
   */
  windowShort = protoInt64.zero;

  /**
   * @generated from field: uint64 window_long = 6;
   */
  windowLong = protoInt64.zero;

  /**
   * @generated from field: uint64 window_probation = 7;
   */
  windowProbation = protoInt64.zero;

  /**
   * @generated from field: string burn_tax_split = 8;
   */
  burnTaxSplit = "";

  /**
   * @generated from field: string min_initial_deposit_ratio = 9;
   */
  minInitialDepositRatio = "";

  /**
   * @generated from field: string oracle_split = 10;
   */
  oracleSplit = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_policy", kind: "message", T: PolicyConstraints },
    { no: 2, name: "reward_policy", kind: "message", T: PolicyConstraints },
    { no: 3, name: "seigniorage_burden_target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mining_increment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "window_short", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "window_long", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "window_probation", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "burn_tax_split", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "min_initial_deposit_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "oracle_split", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * PolicyConstraints - defines policy constraints can be applied in tax & reward policies
 *
 * @generated from message terra.treasury.v1beta1.PolicyConstraints
 */
export class PolicyConstraints extends Message<PolicyConstraints> {
  /**
   * @generated from field: string rate_min = 1;
   */
  rateMin = "";

  /**
   * @generated from field: string rate_max = 2;
   */
  rateMax = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin cap = 3;
   */
  cap?: Coin;

  /**
   * @generated from field: string change_rate_max = 4;
   */
  changeRateMax = "";

  constructor(data?: PartialMessage<PolicyConstraints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.PolicyConstraints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate_min", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rate_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cap", kind: "message", T: Coin },
    { no: 4, name: "change_rate_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyConstraints {
    return new PolicyConstraints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyConstraints {
    return new PolicyConstraints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyConstraints {
    return new PolicyConstraints().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyConstraints | PlainMessage<PolicyConstraints> | undefined, b: PolicyConstraints | PlainMessage<PolicyConstraints> | undefined): boolean {
    return proto3.util.equals(PolicyConstraints, a, b);
  }
}

/**
 * EpochTaxProceeds represents the tax amount
 * collected at the current epoch
 *
 * @generated from message terra.treasury.v1beta1.EpochTaxProceeds
 */
export class EpochTaxProceeds extends Message<EpochTaxProceeds> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tax_proceeds = 1;
   */
  taxProceeds: Coin[] = [];

  constructor(data?: PartialMessage<EpochTaxProceeds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.EpochTaxProceeds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_proceeds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EpochTaxProceeds {
    return new EpochTaxProceeds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EpochTaxProceeds {
    return new EpochTaxProceeds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EpochTaxProceeds {
    return new EpochTaxProceeds().fromJsonString(jsonString, options);
  }

  static equals(a: EpochTaxProceeds | PlainMessage<EpochTaxProceeds> | undefined, b: EpochTaxProceeds | PlainMessage<EpochTaxProceeds> | undefined): boolean {
    return proto3.util.equals(EpochTaxProceeds, a, b);
  }
}

/**
 * EpochInitialIssuance represents initial issuance
 * of the currrent epoch
 *
 * @generated from message terra.treasury.v1beta1.EpochInitialIssuance
 */
export class EpochInitialIssuance extends Message<EpochInitialIssuance> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin issuance = 1;
   */
  issuance: Coin[] = [];

  constructor(data?: PartialMessage<EpochInitialIssuance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.EpochInitialIssuance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuance", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EpochInitialIssuance {
    return new EpochInitialIssuance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EpochInitialIssuance {
    return new EpochInitialIssuance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EpochInitialIssuance {
    return new EpochInitialIssuance().fromJsonString(jsonString, options);
  }

  static equals(a: EpochInitialIssuance | PlainMessage<EpochInitialIssuance> | undefined, b: EpochInitialIssuance | PlainMessage<EpochInitialIssuance> | undefined): boolean {
    return proto3.util.equals(EpochInitialIssuance, a, b);
  }
}

