// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/protocolpool/v1/types.proto (package cosmos.protocolpool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../base/v1beta1/coin_pb.js";

/**
 * Budget defines the fields of a budget proposal.
 *
 * @generated from message cosmos.protocolpool.v1.Budget
 */
export class Budget extends Message<Budget> {
  /**
   * recipient_address is the address of the recipient who can claim the budget.
   *
   * @generated from field: string recipient_address = 1;
   */
  recipientAddress = "";

  /**
   * total_budget is the total amount allocated for the budget.
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_budget = 2;
   */
  totalBudget?: Coin;

  /**
   * claimed_amount is the total amount claimed from the total budget amount requested.
   *
   * @generated from field: cosmos.base.v1beta1.Coin claimed_amount = 3;
   */
  claimedAmount?: Coin;

  /**
   * start_time is the time when the budget becomes claimable.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * next_claim_from is the time when the budget was last successfully claimed or distributed.
   * It is used to track the next starting claim time for fund distribution. If set, it cannot be less than start_time.
   *
   * @generated from field: google.protobuf.Timestamp next_claim_from = 5;
   */
  nextClaimFrom?: Timestamp;

  /**
   * tranches is the number of times the total budget amount is to be distributed.
   *
   * @generated from field: uint64 tranches = 6;
   */
  tranches = protoInt64.zero;

  /**
   * tranches_left is the number of tranches left for the amount to be distributed.
   *
   * @generated from field: uint64 tranches_left = 7;
   */
  tranchesLeft = protoInt64.zero;

  /**
   * Period is the time interval(number of seconds) at which funds distribution should be performed.
   * For example, if a period is set to 3600, it represents an action that
   * should occur every hour (3600 seconds).
   *
   * @generated from field: google.protobuf.Duration period = 8;
   */
  period?: Duration;

  constructor(data?: PartialMessage<Budget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.Budget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_budget", kind: "message", T: Coin },
    { no: 3, name: "claimed_amount", kind: "message", T: Coin },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "next_claim_from", kind: "message", T: Timestamp },
    { no: 6, name: "tranches", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "tranches_left", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Budget {
    return new Budget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Budget {
    return new Budget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Budget {
    return new Budget().fromJsonString(jsonString, options);
  }

  static equals(a: Budget | PlainMessage<Budget> | undefined, b: Budget | PlainMessage<Budget> | undefined): boolean {
    return proto3.util.equals(Budget, a, b);
  }
}

/**
 * ContinuousFund defines the fields of continuous fund proposal.
 *
 * @generated from message cosmos.protocolpool.v1.ContinuousFund
 */
export class ContinuousFund extends Message<ContinuousFund> {
  /**
   * Recipient address of the account receiving funds.
   *
   * @generated from field: string recipient = 1;
   */
  recipient = "";

  /**
   * Percentage is the percentage of funds to be allocated from Community pool.
   *
   * @generated from field: string percentage = 2;
   */
  percentage = "";

  /**
   * Optional, if expiry is set, removes the state object when expired.
   *
   * @generated from field: google.protobuf.Timestamp expiry = 3;
   */
  expiry?: Timestamp;

  constructor(data?: PartialMessage<ContinuousFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.ContinuousFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContinuousFund {
    return new ContinuousFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContinuousFund {
    return new ContinuousFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContinuousFund {
    return new ContinuousFund().fromJsonString(jsonString, options);
  }

  static equals(a: ContinuousFund | PlainMessage<ContinuousFund> | undefined, b: ContinuousFund | PlainMessage<ContinuousFund> | undefined): boolean {
    return proto3.util.equals(ContinuousFund, a, b);
  }
}

