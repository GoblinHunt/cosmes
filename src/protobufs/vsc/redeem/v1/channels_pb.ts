// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file vsc/redeem/v1/channels.proto (package vsc.redeem.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * defines the negotiated channel over which ther
 * redemption bridge will operate
 *
 * @generated from message vsc.redeem.v1.ChannelInfo
 */
export class ChannelInfo extends Message<ChannelInfo> {
  /**
   * defines the src channel for this module
   *
   * @generated from field: string this_channel = 1;
   */
  thisChannel = "";

  /**
   * defines the channel that the counterparrty module
   *
   * @generated from field: string their_channel = 2;
   */
  theirChannel = "";

  /**
   * defines whether the current channel pair is negotiatied
   * through channel handshake
   *
   * @generated from field: bool open = 3;
   */
  open = false;

  constructor(data?: PartialMessage<ChannelInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.redeem.v1.ChannelInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "this_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "their_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChannelInfo {
    return new ChannelInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChannelInfo {
    return new ChannelInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChannelInfo {
    return new ChannelInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ChannelInfo | PlainMessage<ChannelInfo> | undefined, b: ChannelInfo | PlainMessage<ChannelInfo> | undefined): boolean {
    return proto3.util.equals(ChannelInfo, a, b);
  }
}

