// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file cosmos/protocolpool/v1/tx.proto (package cosmos.protocolpool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgCancelContinuousFund, MsgCancelContinuousFundResponse, MsgClaimBudget, MsgClaimBudgetResponse, MsgCommunityPoolSpend, MsgCommunityPoolSpendResponse, MsgCreateContinuousFund, MsgCreateContinuousFundResponse, MsgFundCommunityPool, MsgFundCommunityPoolResponse, MsgSubmitBudgetProposal, MsgSubmitBudgetProposalResponse, MsgWithdrawContinuousFund, MsgWithdrawContinuousFundResponse } from "./tx_pb.js";

const TYPE_NAME = "cosmos.protocolpool.v1.Msg";

/**
 * FundCommunityPool defines a method to allow an account to directly
 * fund the community pool.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.FundCommunityPool
 */
export const MsgFundCommunityPoolService = {
  typeName: TYPE_NAME,
  method: "FundCommunityPool",
  Request: MsgFundCommunityPool,
  Response: MsgFundCommunityPoolResponse,
} as const;

/**
 * CommunityPoolSpend defines a governance operation for sending tokens from
 * the community pool in the x/protocolpool module to another account, which
 * could be the governance module itself. The authority is defined in the
 * keeper.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.CommunityPoolSpend
 */
export const MsgCommunityPoolSpendService = {
  typeName: TYPE_NAME,
  method: "CommunityPoolSpend",
  Request: MsgCommunityPoolSpend,
  Response: MsgCommunityPoolSpendResponse,
} as const;

/**
 * SubmitBudgetProposal defines a method to set a budget proposal.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.SubmitBudgetProposal
 */
export const MsgSubmitBudgetProposalService = {
  typeName: TYPE_NAME,
  method: "SubmitBudgetProposal",
  Request: MsgSubmitBudgetProposal,
  Response: MsgSubmitBudgetProposalResponse,
} as const;

/**
 * ClaimBudget defines a method to claim the distributed budget.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.ClaimBudget
 */
export const MsgClaimBudgetService = {
  typeName: TYPE_NAME,
  method: "ClaimBudget",
  Request: MsgClaimBudget,
  Response: MsgClaimBudgetResponse,
} as const;

/**
 * CreateContinuousFund defines a method to add funds continuously.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.CreateContinuousFund
 */
export const MsgCreateContinuousFundService = {
  typeName: TYPE_NAME,
  method: "CreateContinuousFund",
  Request: MsgCreateContinuousFund,
  Response: MsgCreateContinuousFundResponse,
} as const;

/**
 * WithdrawContinuousFund defines a method to withdraw continuous fund allocated.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.WithdrawContinuousFund
 */
export const MsgWithdrawContinuousFundService = {
  typeName: TYPE_NAME,
  method: "WithdrawContinuousFund",
  Request: MsgWithdrawContinuousFund,
  Response: MsgWithdrawContinuousFundResponse,
} as const;

/**
 * CancelContinuousFund defines a method for cancelling continuous fund.
 *
 * @generated from rpc cosmos.protocolpool.v1.Msg.CancelContinuousFund
 */
export const MsgCancelContinuousFundService = {
  typeName: TYPE_NAME,
  method: "CancelContinuousFund",
  Request: MsgCancelContinuousFund,
  Response: MsgCancelContinuousFundResponse,
} as const;

