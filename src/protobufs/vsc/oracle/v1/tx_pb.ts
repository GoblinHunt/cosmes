// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file vsc/oracle/v1/tx.proto (package vsc.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./oracle_pb.js";

/**
 * MsgAggregateExchangeRatePrevote represents a message to submit
 * aggregate exchange rate prevote.
 *
 * @generated from message vsc.oracle.v1.MsgAggregateExchangeRatePrevote
 */
export class MsgAggregateExchangeRatePrevote extends Message<MsgAggregateExchangeRatePrevote> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * Feeder is the Bech32 address of the price feeder. A validator may
   * specify multiple price feeders by delegating them consent. The validator
   * address is also a valid feeder by default.
   *
   * @generated from field: string feeder = 2;
   */
  feeder = "";

  /**
   * Validator is the Bech32 address to which the prevote will be credited.
   *
   * @generated from field: string validator = 3;
   */
  validator = "";

  constructor(data?: PartialMessage<MsgAggregateExchangeRatePrevote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgAggregateExchangeRatePrevote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAggregateExchangeRatePrevote | PlainMessage<MsgAggregateExchangeRatePrevote> | undefined, b: MsgAggregateExchangeRatePrevote | PlainMessage<MsgAggregateExchangeRatePrevote> | undefined): boolean {
    return proto3.util.equals(MsgAggregateExchangeRatePrevote, a, b);
  }
}

/**
 * MsgAggregateExchangeRatePrevoteResponse defines the
 * Msg/AggregateExchangeRatePrevote response type.
 *
 * @generated from message vsc.oracle.v1.MsgAggregateExchangeRatePrevoteResponse
 */
export class MsgAggregateExchangeRatePrevoteResponse extends Message<MsgAggregateExchangeRatePrevoteResponse> {
  constructor(data?: PartialMessage<MsgAggregateExchangeRatePrevoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgAggregateExchangeRatePrevoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAggregateExchangeRatePrevoteResponse | PlainMessage<MsgAggregateExchangeRatePrevoteResponse> | undefined, b: MsgAggregateExchangeRatePrevoteResponse | PlainMessage<MsgAggregateExchangeRatePrevoteResponse> | undefined): boolean {
    return proto3.util.equals(MsgAggregateExchangeRatePrevoteResponse, a, b);
  }
}

/**
 * MsgAggregateExchangeRateVote represents a message to submit
 * aggregate exchange rate vote.
 *
 * @generated from message vsc.oracle.v1.MsgAggregateExchangeRateVote
 */
export class MsgAggregateExchangeRateVote extends Message<MsgAggregateExchangeRateVote> {
  /**
   * @generated from field: string salt = 1;
   */
  salt = "";

  /**
   * @generated from field: string exchange_rates = 2;
   */
  exchangeRates = "";

  /**
   * Feeder is the Bech32 address of the price feeder. A validator may
   * specify multiple price feeders by delegating them consent. The validator
   * address is also a valid feeder by default.
   *
   * @generated from field: string feeder = 3;
   */
  feeder = "";

  /**
   * Validator is the Bech32 address to which the vote will be credited.
   *
   * @generated from field: string validator = 4;
   */
  validator = "";

  constructor(data?: PartialMessage<MsgAggregateExchangeRateVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgAggregateExchangeRateVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "salt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange_rates", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAggregateExchangeRateVote | PlainMessage<MsgAggregateExchangeRateVote> | undefined, b: MsgAggregateExchangeRateVote | PlainMessage<MsgAggregateExchangeRateVote> | undefined): boolean {
    return proto3.util.equals(MsgAggregateExchangeRateVote, a, b);
  }
}

/**
 * MsgAggregateExchangeRateVoteResponse defines the
 * Msg/AggregateExchangeRateVote response type.
 *
 * @generated from message vsc.oracle.v1.MsgAggregateExchangeRateVoteResponse
 */
export class MsgAggregateExchangeRateVoteResponse extends Message<MsgAggregateExchangeRateVoteResponse> {
  constructor(data?: PartialMessage<MsgAggregateExchangeRateVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgAggregateExchangeRateVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAggregateExchangeRateVoteResponse | PlainMessage<MsgAggregateExchangeRateVoteResponse> | undefined, b: MsgAggregateExchangeRateVoteResponse | PlainMessage<MsgAggregateExchangeRateVoteResponse> | undefined): boolean {
    return proto3.util.equals(MsgAggregateExchangeRateVoteResponse, a, b);
  }
}

/**
 * MsgDelegateFeedConsent represents a message to delegate oracle voting rights
 * to another address.
 *
 * @generated from message vsc.oracle.v1.MsgDelegateFeedConsent
 */
export class MsgDelegateFeedConsent extends Message<MsgDelegateFeedConsent> {
  /**
   * @generated from field: string operator = 1;
   */
  operator = "";

  /**
   * @generated from field: string delegate = 2;
   */
  delegate = "";

  constructor(data?: PartialMessage<MsgDelegateFeedConsent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgDelegateFeedConsent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delegate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateFeedConsent | PlainMessage<MsgDelegateFeedConsent> | undefined, b: MsgDelegateFeedConsent | PlainMessage<MsgDelegateFeedConsent> | undefined): boolean {
    return proto3.util.equals(MsgDelegateFeedConsent, a, b);
  }
}

/**
 * MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
 * type.
 *
 * @generated from message vsc.oracle.v1.MsgDelegateFeedConsentResponse
 */
export class MsgDelegateFeedConsentResponse extends Message<MsgDelegateFeedConsentResponse> {
  constructor(data?: PartialMessage<MsgDelegateFeedConsentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgDelegateFeedConsentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateFeedConsentResponse | PlainMessage<MsgDelegateFeedConsentResponse> | undefined, b: MsgDelegateFeedConsentResponse | PlainMessage<MsgDelegateFeedConsentResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateFeedConsentResponse, a, b);
  }
}

/**
 * MsgEditOracleParams: gRPC tx message for updating the x/oracle module params
 * [PERMISSIONED] Only callable by permissioned addrs.
 *
 * @generated from message vsc.oracle.v1.MsgEditOracleParams
 */
export class MsgEditOracleParams extends Message<MsgEditOracleParams> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string vote_period = 2;
   */
  votePeriod = "";

  /**
   * vote_threshold: [cosmossdk.io/math.LegacyDec] TODO:
   *
   * @generated from field: string vote_threshold = 3;
   */
  voteThreshold = "";

  /**
   * reward_band: [cosmossdk.io/math.LegacyDec] TODO:
   *
   * @generated from field: string reward_band = 4;
   */
  rewardBand = "";

  /**
   * @generated from field: repeated string whitelist = 5;
   */
  whitelist: string[] = [];

  /**
   * slash_fraction: [cosmossdk.io/math.LegacyDec] TODO:
   *
   * @generated from field: string slash_fraction = 6;
   */
  slashFraction = "";

  /**
   * @generated from field: string slash_window = 7;
   */
  slashWindow = "";

  /**
   * min_valid_per_window: [cosmossdk.io/math.LegacyDec] TODO:
   *
   * @generated from field: string min_valid_per_window = 8;
   */
  minValidPerWindow = "";

  /**
   * @generated from field: string twap_lookback_window = 9;
   */
  twapLookbackWindow = "";

  /**
   * @generated from field: string min_voters = 10;
   */
  minVoters = "";

  /**
   * @generated from field: string expiration_blocks = 11;
   */
  expirationBlocks = "";

  /**
   * @generated from field: string gas_price_for_flatfee = 12;
   */
  gasPriceForFlatfee = "";

  constructor(data?: PartialMessage<MsgEditOracleParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgEditOracleParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vote_period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "slash_fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "slash_window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "min_valid_per_window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "twap_lookback_window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "min_voters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "expiration_blocks", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "gas_price_for_flatfee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEditOracleParams {
    return new MsgEditOracleParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEditOracleParams {
    return new MsgEditOracleParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEditOracleParams {
    return new MsgEditOracleParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEditOracleParams | PlainMessage<MsgEditOracleParams> | undefined, b: MsgEditOracleParams | PlainMessage<MsgEditOracleParams> | undefined): boolean {
    return proto3.util.equals(MsgEditOracleParams, a, b);
  }
}

/**
 * MsgEditOracleParamsResponse defines the Msg/EditOracleParams response
 * type.
 *
 * @generated from message vsc.oracle.v1.MsgEditOracleParamsResponse
 */
export class MsgEditOracleParamsResponse extends Message<MsgEditOracleParamsResponse> {
  /**
   * @generated from field: vsc.oracle.v1.Params new_params = 1;
   */
  newParams?: Params;

  constructor(data?: PartialMessage<MsgEditOracleParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.oracle.v1.MsgEditOracleParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgEditOracleParamsResponse {
    return new MsgEditOracleParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgEditOracleParamsResponse {
    return new MsgEditOracleParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgEditOracleParamsResponse {
    return new MsgEditOracleParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgEditOracleParamsResponse | PlainMessage<MsgEditOracleParamsResponse> | undefined, b: MsgEditOracleParamsResponse | PlainMessage<MsgEditOracleParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgEditOracleParamsResponse, a, b);
  }
}

