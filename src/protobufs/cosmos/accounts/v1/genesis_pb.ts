// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/accounts/v1/genesis.proto (package cosmos.accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GenesisState defines the accounts' module's genesis state.
 *
 * @generated from message cosmos.accounts.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * account_number is the latest account number.
   *
   * @generated from field: uint64 account_number = 1;
   */
  accountNumber = protoInt64.zero;

  /**
   * accounts are the genesis accounts.
   *
   * @generated from field: repeated cosmos.accounts.v1.GenesisAccount accounts = 2;
   */
  accounts: GenesisAccount[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "accounts", kind: "message", T: GenesisAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * GenesisAccount defines an account to be initialized in the genesis state.
 *
 * @generated from message cosmos.accounts.v1.GenesisAccount
 */
export class GenesisAccount extends Message<GenesisAccount> {
  /**
   * address is the address of the account.
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * account_type is the account type of the account.
   *
   * @generated from field: string account_type = 2;
   */
  accountType = "";

  /**
   * account_number is the account number of the account.
   *
   * @generated from field: uint64 account_number = 3;
   */
  accountNumber = protoInt64.zero;

  /**
   * state is the account state represented as a slice of raw key value byte pairs.
   *
   * @generated from field: repeated cosmos.accounts.v1.KVPair state = 4;
   */
  state: KVPair[] = [];

  constructor(data?: PartialMessage<GenesisAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.GenesisAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "state", kind: "message", T: KVPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisAccount {
    return new GenesisAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisAccount {
    return new GenesisAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisAccount {
    return new GenesisAccount().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisAccount | PlainMessage<GenesisAccount> | undefined, b: GenesisAccount | PlainMessage<GenesisAccount> | undefined): boolean {
    return proto3.util.equals(GenesisAccount, a, b);
  }
}

/**
 * KVPair defines a key value pair.
 *
 * @generated from message cosmos.accounts.v1.KVPair
 */
export class KVPair extends Message<KVPair> {
  /**
   * key is the key of the pair.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * value is the value of the pair.
   *
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<KVPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.accounts.v1.KVPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KVPair {
    return new KVPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KVPair {
    return new KVPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KVPair {
    return new KVPair().fromJsonString(jsonString, options);
  }

  static equals(a: KVPair | PlainMessage<KVPair> | undefined, b: KVPair | PlainMessage<KVPair> | undefined): boolean {
    return proto3.util.equals(KVPair, a, b);
  }
}

