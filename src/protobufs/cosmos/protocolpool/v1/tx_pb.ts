// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/protocolpool/v1/tx.proto (package cosmos.protocolpool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../base/v1beta1/coin_pb.js";

/**
 * MsgFundCommunityPool allows an account to directly
 * fund the community pool.
 *
 * @generated from message cosmos.protocolpool.v1.MsgFundCommunityPool
 */
export class MsgFundCommunityPool extends Message<MsgFundCommunityPool> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: string depositor = 2;
   */
  depositor = "";

  constructor(data?: PartialMessage<MsgFundCommunityPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgFundCommunityPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFundCommunityPool {
    return new MsgFundCommunityPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFundCommunityPool {
    return new MsgFundCommunityPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFundCommunityPool {
    return new MsgFundCommunityPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFundCommunityPool | PlainMessage<MsgFundCommunityPool> | undefined, b: MsgFundCommunityPool | PlainMessage<MsgFundCommunityPool> | undefined): boolean {
    return proto3.util.equals(MsgFundCommunityPool, a, b);
  }
}

/**
 * MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
 *
 * @generated from message cosmos.protocolpool.v1.MsgFundCommunityPoolResponse
 */
export class MsgFundCommunityPoolResponse extends Message<MsgFundCommunityPoolResponse> {
  constructor(data?: PartialMessage<MsgFundCommunityPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgFundCommunityPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgFundCommunityPoolResponse {
    return new MsgFundCommunityPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgFundCommunityPoolResponse {
    return new MsgFundCommunityPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgFundCommunityPoolResponse {
    return new MsgFundCommunityPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgFundCommunityPoolResponse | PlainMessage<MsgFundCommunityPoolResponse> | undefined, b: MsgFundCommunityPoolResponse | PlainMessage<MsgFundCommunityPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgFundCommunityPoolResponse, a, b);
  }
}

/**
 * MsgCommunityPoolSpend defines a message for sending tokens from the community
 * pool to another account. This message is typically executed via a governance
 * proposal with the governance module being the executing authority.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCommunityPoolSpend
 */
export class MsgCommunityPoolSpend extends Message<MsgCommunityPoolSpend> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgCommunityPoolSpend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCommunityPoolSpend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCommunityPoolSpend {
    return new MsgCommunityPoolSpend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCommunityPoolSpend {
    return new MsgCommunityPoolSpend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCommunityPoolSpend {
    return new MsgCommunityPoolSpend().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCommunityPoolSpend | PlainMessage<MsgCommunityPoolSpend> | undefined, b: MsgCommunityPoolSpend | PlainMessage<MsgCommunityPoolSpend> | undefined): boolean {
    return proto3.util.equals(MsgCommunityPoolSpend, a, b);
  }
}

/**
 * MsgCommunityPoolSpendResponse defines the response to executing a
 * MsgCommunityPoolSpend message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCommunityPoolSpendResponse
 */
export class MsgCommunityPoolSpendResponse extends Message<MsgCommunityPoolSpendResponse> {
  constructor(data?: PartialMessage<MsgCommunityPoolSpendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCommunityPoolSpendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCommunityPoolSpendResponse {
    return new MsgCommunityPoolSpendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCommunityPoolSpendResponse {
    return new MsgCommunityPoolSpendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCommunityPoolSpendResponse {
    return new MsgCommunityPoolSpendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCommunityPoolSpendResponse | PlainMessage<MsgCommunityPoolSpendResponse> | undefined, b: MsgCommunityPoolSpendResponse | PlainMessage<MsgCommunityPoolSpendResponse> | undefined): boolean {
    return proto3.util.equals(MsgCommunityPoolSpendResponse, a, b);
  }
}

/**
 * MsgSubmitBudgetProposal defines budget proposal type.
 *
 * @generated from message cosmos.protocolpool.v1.MsgSubmitBudgetProposal
 */
export class MsgSubmitBudgetProposal extends Message<MsgSubmitBudgetProposal> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * RecipientAddress is the address of the recipient who can claim the budget.
   *
   * @generated from field: string recipient_address = 2;
   */
  recipientAddress = "";

  /**
   * TotalBudget is the total amount allocated for the budget.
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_budget = 3;
   */
  totalBudget?: Coin;

  /**
   * StartTime is the time when the budget becomes claimable.
   * If StartTime is less than the current block time, proposal will not be accepted.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * Tranches is the number of times the total budget amount is to be distributed.
   *
   * @generated from field: uint64 tranches = 5;
   */
  tranches = protoInt64.zero;

  /**
   * Period is the time interval(number of seconds) at which funds distribution should be performed.
   * For example, if a period is set to 3600, it represents an action that
   * should occur every hour (3600 seconds).
   *
   * @generated from field: google.protobuf.Duration period = 6;
   */
  period?: Duration;

  constructor(data?: PartialMessage<MsgSubmitBudgetProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgSubmitBudgetProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_budget", kind: "message", T: Coin },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "tranches", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBudgetProposal {
    return new MsgSubmitBudgetProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBudgetProposal {
    return new MsgSubmitBudgetProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBudgetProposal {
    return new MsgSubmitBudgetProposal().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBudgetProposal | PlainMessage<MsgSubmitBudgetProposal> | undefined, b: MsgSubmitBudgetProposal | PlainMessage<MsgSubmitBudgetProposal> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBudgetProposal, a, b);
  }
}

/**
 * MsgSubmitBudgetProposalResponse defines the response to executing a
 * MsgSubmitBudgetProposal message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgSubmitBudgetProposalResponse
 */
export class MsgSubmitBudgetProposalResponse extends Message<MsgSubmitBudgetProposalResponse> {
  constructor(data?: PartialMessage<MsgSubmitBudgetProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgSubmitBudgetProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSubmitBudgetProposalResponse {
    return new MsgSubmitBudgetProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSubmitBudgetProposalResponse {
    return new MsgSubmitBudgetProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSubmitBudgetProposalResponse {
    return new MsgSubmitBudgetProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSubmitBudgetProposalResponse | PlainMessage<MsgSubmitBudgetProposalResponse> | undefined, b: MsgSubmitBudgetProposalResponse | PlainMessage<MsgSubmitBudgetProposalResponse> | undefined): boolean {
    return proto3.util.equals(MsgSubmitBudgetProposalResponse, a, b);
  }
}

/**
 * MsgClaimBudget defines a message for claiming the distributed budget.
 *
 * @generated from message cosmos.protocolpool.v1.MsgClaimBudget
 */
export class MsgClaimBudget extends Message<MsgClaimBudget> {
  /**
   * @generated from field: string recipient_address = 1;
   */
  recipientAddress = "";

  constructor(data?: PartialMessage<MsgClaimBudget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgClaimBudget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimBudget {
    return new MsgClaimBudget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimBudget {
    return new MsgClaimBudget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimBudget {
    return new MsgClaimBudget().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimBudget | PlainMessage<MsgClaimBudget> | undefined, b: MsgClaimBudget | PlainMessage<MsgClaimBudget> | undefined): boolean {
    return proto3.util.equals(MsgClaimBudget, a, b);
  }
}

/**
 * MsgClaimBudgetResponse defines the response to executing a
 * MsgClaimBudget message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgClaimBudgetResponse
 */
export class MsgClaimBudgetResponse extends Message<MsgClaimBudgetResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgClaimBudgetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgClaimBudgetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimBudgetResponse {
    return new MsgClaimBudgetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimBudgetResponse {
    return new MsgClaimBudgetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimBudgetResponse {
    return new MsgClaimBudgetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimBudgetResponse | PlainMessage<MsgClaimBudgetResponse> | undefined, b: MsgClaimBudgetResponse | PlainMessage<MsgClaimBudgetResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimBudgetResponse, a, b);
  }
}

/**
 * MsgCreateContinuousFund defines a message for adding continuous funds.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCreateContinuousFund
 */
export class MsgCreateContinuousFund extends Message<MsgCreateContinuousFund> {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * Recipient address of the account receiving funds.
   *
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * Percentage is the percentage of funds to be allocated from Community pool.
   *
   * @generated from field: string percentage = 3;
   */
  percentage = "";

  /**
   * Optional, if expiry is set, removes the state object when expired.
   *
   * @generated from field: google.protobuf.Timestamp expiry = 4;
   */
  expiry?: Timestamp;

  constructor(data?: PartialMessage<MsgCreateContinuousFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCreateContinuousFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiry", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateContinuousFund {
    return new MsgCreateContinuousFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateContinuousFund {
    return new MsgCreateContinuousFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateContinuousFund {
    return new MsgCreateContinuousFund().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateContinuousFund | PlainMessage<MsgCreateContinuousFund> | undefined, b: MsgCreateContinuousFund | PlainMessage<MsgCreateContinuousFund> | undefined): boolean {
    return proto3.util.equals(MsgCreateContinuousFund, a, b);
  }
}

/**
 * MsgCreateContinuousFundResponse defines the response to executing a
 * MsgCreateContinuousFund message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCreateContinuousFundResponse
 */
export class MsgCreateContinuousFundResponse extends Message<MsgCreateContinuousFundResponse> {
  constructor(data?: PartialMessage<MsgCreateContinuousFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCreateContinuousFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateContinuousFundResponse {
    return new MsgCreateContinuousFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateContinuousFundResponse {
    return new MsgCreateContinuousFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateContinuousFundResponse {
    return new MsgCreateContinuousFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateContinuousFundResponse | PlainMessage<MsgCreateContinuousFundResponse> | undefined, b: MsgCreateContinuousFundResponse | PlainMessage<MsgCreateContinuousFundResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateContinuousFundResponse, a, b);
  }
}

/**
 * MsgCancelContinuousFund defines a message to cancel continuous funds for a specific recipient.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCancelContinuousFund
 */
export class MsgCancelContinuousFund extends Message<MsgCancelContinuousFund> {
  /**
   * Authority is the account address of authority.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * RecipientAddress is the account address of recipient whose funds are to be cancelled.
   *
   * @generated from field: string recipient_address = 2;
   */
  recipientAddress = "";

  constructor(data?: PartialMessage<MsgCancelContinuousFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCancelContinuousFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelContinuousFund {
    return new MsgCancelContinuousFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelContinuousFund {
    return new MsgCancelContinuousFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelContinuousFund {
    return new MsgCancelContinuousFund().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelContinuousFund | PlainMessage<MsgCancelContinuousFund> | undefined, b: MsgCancelContinuousFund | PlainMessage<MsgCancelContinuousFund> | undefined): boolean {
    return proto3.util.equals(MsgCancelContinuousFund, a, b);
  }
}

/**
 * MsgCancelContinuousFundResponse defines the response to executing a
 * MsgCancelContinuousFund message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgCancelContinuousFundResponse
 */
export class MsgCancelContinuousFundResponse extends Message<MsgCancelContinuousFundResponse> {
  /**
   * CanceledTime is the canceled time.
   *
   * @generated from field: google.protobuf.Timestamp canceled_time = 1;
   */
  canceledTime?: Timestamp;

  /**
   * CanceledHeight defines the canceled block height.
   *
   * @generated from field: uint64 canceled_height = 2;
   */
  canceledHeight = protoInt64.zero;

  /**
   * RecipientAddress is the account address of recipient whose funds are cancelled.
   *
   * @generated from field: string recipient_address = 3;
   */
  recipientAddress = "";

  /**
   * withdrawnAllocatedFund represents the fund allocated to this recipient (if any) that have not been withdrawn yet,
   * before a cancellation request has been initiated.
   * It involves first withdrawing the funds and then canceling the request.
   *
   * @generated from field: cosmos.base.v1beta1.Coin withdrawn_allocated_fund = 4;
   */
  withdrawnAllocatedFund?: Coin;

  constructor(data?: PartialMessage<MsgCancelContinuousFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgCancelContinuousFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "canceled_time", kind: "message", T: Timestamp },
    { no: 2, name: "canceled_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "withdrawn_allocated_fund", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelContinuousFundResponse {
    return new MsgCancelContinuousFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelContinuousFundResponse {
    return new MsgCancelContinuousFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelContinuousFundResponse {
    return new MsgCancelContinuousFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelContinuousFundResponse | PlainMessage<MsgCancelContinuousFundResponse> | undefined, b: MsgCancelContinuousFundResponse | PlainMessage<MsgCancelContinuousFundResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelContinuousFundResponse, a, b);
  }
}

/**
 * MsgWithdrawContinuousFund defines a message for withdrawing the continuous fund allocated to it.
 *
 * @generated from message cosmos.protocolpool.v1.MsgWithdrawContinuousFund
 */
export class MsgWithdrawContinuousFund extends Message<MsgWithdrawContinuousFund> {
  /**
   * @generated from field: string recipient_address = 1;
   */
  recipientAddress = "";

  constructor(data?: PartialMessage<MsgWithdrawContinuousFund>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgWithdrawContinuousFund";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recipient_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawContinuousFund {
    return new MsgWithdrawContinuousFund().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawContinuousFund {
    return new MsgWithdrawContinuousFund().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawContinuousFund {
    return new MsgWithdrawContinuousFund().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawContinuousFund | PlainMessage<MsgWithdrawContinuousFund> | undefined, b: MsgWithdrawContinuousFund | PlainMessage<MsgWithdrawContinuousFund> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawContinuousFund, a, b);
  }
}

/**
 * MsgWithdrawContinuousFundResponse defines the response to executing a
 * MsgWithdrawContinuousFund message.
 *
 * @generated from message cosmos.protocolpool.v1.MsgWithdrawContinuousFundResponse
 */
export class MsgWithdrawContinuousFundResponse extends Message<MsgWithdrawContinuousFundResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgWithdrawContinuousFundResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.protocolpool.v1.MsgWithdrawContinuousFundResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawContinuousFundResponse {
    return new MsgWithdrawContinuousFundResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawContinuousFundResponse {
    return new MsgWithdrawContinuousFundResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawContinuousFundResponse {
    return new MsgWithdrawContinuousFundResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawContinuousFundResponse | PlainMessage<MsgWithdrawContinuousFundResponse> | undefined, b: MsgWithdrawContinuousFundResponse | PlainMessage<MsgWithdrawContinuousFundResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawContinuousFundResponse, a, b);
  }
}

