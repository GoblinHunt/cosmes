// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/oracle/v1beta1/oracle.proto (package terra.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Params defines the parameters for the oracle module.
 *
 * @generated from message terra.oracle.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: uint64 vote_period = 1;
   */
  votePeriod = protoInt64.zero;

  /**
   * @generated from field: string vote_threshold = 2;
   */
  voteThreshold = "";

  /**
   * @generated from field: string reward_band = 3;
   */
  rewardBand = "";

  /**
   * @generated from field: uint64 reward_distribution_window = 4;
   */
  rewardDistributionWindow = protoInt64.zero;

  /**
   * @generated from field: repeated terra.oracle.v1beta1.Denom whitelist = 5;
   */
  whitelist: Denom[] = [];

  /**
   * @generated from field: string slash_fraction = 6;
   */
  slashFraction = "";

  /**
   * @generated from field: uint64 slash_window = 7;
   */
  slashWindow = protoInt64.zero;

  /**
   * @generated from field: string min_valid_per_window = 8;
   */
  minValidPerWindow = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.oracle.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reward_distribution_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "whitelist", kind: "message", T: Denom, repeated: true },
    { no: 6, name: "slash_fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "slash_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "min_valid_per_window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Denom - the object to hold configurations of each denom
 *
 * @generated from message terra.oracle.v1beta1.Denom
 */
export class Denom extends Message<Denom> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string tobin_tax = 2;
   */
  tobinTax = "";

  constructor(data?: PartialMessage<Denom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.oracle.v1beta1.Denom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tobin_tax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Denom {
    return new Denom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Denom {
    return new Denom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Denom {
    return new Denom().fromJsonString(jsonString, options);
  }

  static equals(a: Denom | PlainMessage<Denom> | undefined, b: Denom | PlainMessage<Denom> | undefined): boolean {
    return proto3.util.equals(Denom, a, b);
  }
}

/**
 * struct for aggregate prevoting on the ExchangeRateVote.
 * The purpose of aggregate prevote is to hide vote exchange rates with hash
 * which is formatted as hex string in SHA256("{salt}:{exchange rate}{denom},...,{exchange rate}{denom}:{voter}")
 *
 * @generated from message terra.oracle.v1beta1.AggregateExchangeRatePrevote
 */
export class AggregateExchangeRatePrevote extends Message<AggregateExchangeRatePrevote> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string voter = 2;
   */
  voter = "";

  /**
   * @generated from field: uint64 submit_block = 3;
   */
  submitBlock = protoInt64.zero;

  constructor(data?: PartialMessage<AggregateExchangeRatePrevote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.oracle.v1beta1.AggregateExchangeRatePrevote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromJsonString(jsonString, options);
  }

  static equals(a: AggregateExchangeRatePrevote | PlainMessage<AggregateExchangeRatePrevote> | undefined, b: AggregateExchangeRatePrevote | PlainMessage<AggregateExchangeRatePrevote> | undefined): boolean {
    return proto3.util.equals(AggregateExchangeRatePrevote, a, b);
  }
}

/**
 * MsgAggregateExchangeRateVote - struct for voting on
 * the exchange rates of Luna denominated in various Terra assets.
 *
 * @generated from message terra.oracle.v1beta1.AggregateExchangeRateVote
 */
export class AggregateExchangeRateVote extends Message<AggregateExchangeRateVote> {
  /**
   * @generated from field: repeated terra.oracle.v1beta1.ExchangeRateTuple exchange_rate_tuples = 1;
   */
  exchangeRateTuples: ExchangeRateTuple[] = [];

  /**
   * @generated from field: string voter = 2;
   */
  voter = "";

  constructor(data?: PartialMessage<AggregateExchangeRateVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.oracle.v1beta1.AggregateExchangeRateVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rate_tuples", kind: "message", T: ExchangeRateTuple, repeated: true },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromJsonString(jsonString, options);
  }

  static equals(a: AggregateExchangeRateVote | PlainMessage<AggregateExchangeRateVote> | undefined, b: AggregateExchangeRateVote | PlainMessage<AggregateExchangeRateVote> | undefined): boolean {
    return proto3.util.equals(AggregateExchangeRateVote, a, b);
  }
}

/**
 * ExchangeRateTuple - struct to store interpreted exchange rates data to store
 *
 * @generated from message terra.oracle.v1beta1.ExchangeRateTuple
 */
export class ExchangeRateTuple extends Message<ExchangeRateTuple> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string exchange_rate = 2;
   */
  exchangeRate = "";

  constructor(data?: PartialMessage<ExchangeRateTuple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.oracle.v1beta1.ExchangeRateTuple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeRateTuple {
    return new ExchangeRateTuple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeRateTuple {
    return new ExchangeRateTuple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeRateTuple {
    return new ExchangeRateTuple().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeRateTuple | PlainMessage<ExchangeRateTuple> | undefined, b: ExchangeRateTuple | PlainMessage<ExchangeRateTuple> | undefined): boolean {
    return proto3.util.equals(ExchangeRateTuple, a, b);
  }
}

