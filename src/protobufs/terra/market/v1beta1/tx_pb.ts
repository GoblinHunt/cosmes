// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/market/v1beta1/tx.proto (package terra.market.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgSwap represents a message to swap coin to another denom.
 *
 * @generated from message terra.market.v1beta1.MsgSwap
 */
export class MsgSwap extends Message<MsgSwap> {
  /**
   * @generated from field: string trader = 1;
   */
  trader = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin offer_coin = 2;
   */
  offerCoin?: Coin;

  /**
   * @generated from field: string ask_denom = 3;
   */
  askDenom = "";

  constructor(data?: PartialMessage<MsgSwap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.market.v1beta1.MsgSwap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trader", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offer_coin", kind: "message", T: Coin },
    { no: 3, name: "ask_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwap {
    return new MsgSwap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwap {
    return new MsgSwap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwap {
    return new MsgSwap().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwap | PlainMessage<MsgSwap> | undefined, b: MsgSwap | PlainMessage<MsgSwap> | undefined): boolean {
    return proto3.util.equals(MsgSwap, a, b);
  }
}

/**
 * MsgSwapResponse defines the Msg/Swap response type.
 *
 * @generated from message terra.market.v1beta1.MsgSwapResponse
 */
export class MsgSwapResponse extends Message<MsgSwapResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_coin = 1;
   */
  swapCoin?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_fee = 2;
   */
  swapFee?: Coin;

  constructor(data?: PartialMessage<MsgSwapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.market.v1beta1.MsgSwapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_coin", kind: "message", T: Coin },
    { no: 2, name: "swap_fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapResponse {
    return new MsgSwapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapResponse {
    return new MsgSwapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapResponse {
    return new MsgSwapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapResponse | PlainMessage<MsgSwapResponse> | undefined, b: MsgSwapResponse | PlainMessage<MsgSwapResponse> | undefined): boolean {
    return proto3.util.equals(MsgSwapResponse, a, b);
  }
}

/**
 * MsgSwapSend represents a message to swap coin and send all result coin to recipient
 *
 * @generated from message terra.market.v1beta1.MsgSwapSend
 */
export class MsgSwapSend extends Message<MsgSwapSend> {
  /**
   * @generated from field: string from_address = 1;
   */
  fromAddress = "";

  /**
   * @generated from field: string to_address = 2;
   */
  toAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin offer_coin = 3;
   */
  offerCoin?: Coin;

  /**
   * @generated from field: string ask_denom = 4;
   */
  askDenom = "";

  constructor(data?: PartialMessage<MsgSwapSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.market.v1beta1.MsgSwapSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "offer_coin", kind: "message", T: Coin },
    { no: 4, name: "ask_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapSend {
    return new MsgSwapSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapSend {
    return new MsgSwapSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapSend {
    return new MsgSwapSend().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapSend | PlainMessage<MsgSwapSend> | undefined, b: MsgSwapSend | PlainMessage<MsgSwapSend> | undefined): boolean {
    return proto3.util.equals(MsgSwapSend, a, b);
  }
}

/**
 * MsgSwapSendResponse defines the Msg/SwapSend response type.
 *
 * @generated from message terra.market.v1beta1.MsgSwapSendResponse
 */
export class MsgSwapSendResponse extends Message<MsgSwapSendResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_coin = 1;
   */
  swapCoin?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin swap_fee = 2;
   */
  swapFee?: Coin;

  constructor(data?: PartialMessage<MsgSwapSendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.market.v1beta1.MsgSwapSendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_coin", kind: "message", T: Coin },
    { no: 2, name: "swap_fee", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapSendResponse {
    return new MsgSwapSendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapSendResponse {
    return new MsgSwapSendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapSendResponse {
    return new MsgSwapSendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapSendResponse | PlainMessage<MsgSwapSendResponse> | undefined, b: MsgSwapSendResponse | PlainMessage<MsgSwapSendResponse> | undefined): boolean {
    return proto3.util.equals(MsgSwapSendResponse, a, b);
  }
}

