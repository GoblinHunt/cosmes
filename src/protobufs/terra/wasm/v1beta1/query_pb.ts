// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/query.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ContractInfo } from "cosmes/protobufs/cosmwasm/wasm/v1/types_pb.js";

/**
 * QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
 * method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractInfoRequest
 */
export class QueryContractInfoRequest extends Message<QueryContractInfoRequest> {
  /**
   * address is the address of the contract to query
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryContractInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractInfoRequest {
    return new QueryContractInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractInfoRequest | PlainMessage<QueryContractInfoRequest> | undefined, b: QueryContractInfoRequest | PlainMessage<QueryContractInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryContractInfoRequest, a, b);
  }
}

/**
 * QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
 * method
 *
 * @generated from message cosmwasm.wasm.v1.QueryContractInfoResponse
 */
export class QueryContractInfoResponse extends Message<QueryContractInfoResponse> {
  /**
   * address is the address of the contract
   *
   * @generated from field: cosmwasm.wasm.v1.ContractInfo contract_info = 1;
   */
  contractInfo?: ContractInfo;

  constructor(data?: PartialMessage<QueryContractInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmwasm.wasm.v1.QueryContractInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_info", kind: "message", T: ContractInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryContractInfoResponse {
    return new QueryContractInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryContractInfoResponse | PlainMessage<QueryContractInfoResponse> | undefined, b: QueryContractInfoResponse | PlainMessage<QueryContractInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryContractInfoResponse, a, b);
  }
}

