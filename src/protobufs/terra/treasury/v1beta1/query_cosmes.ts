// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file terra/treasury/v1beta1/query.proto (package terra.treasury.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryBurnTaxExemptionListRequest, QueryBurnTaxExemptionListResponse, QueryIndicatorsRequest, QueryIndicatorsResponse, QueryParamsRequest, QueryParamsResponse, QueryRewardWeightRequest, QueryRewardWeightResponse, QuerySeigniorageProceedsRequest, QuerySeigniorageProceedsResponse, QueryTaxCapRequest, QueryTaxCapResponse, QueryTaxCapsRequest, QueryTaxCapsResponse, QueryTaxProceedsRequest, QueryTaxProceedsResponse, QueryTaxRateRequest, QueryTaxRateResponse } from "./query_pb.js";

const TYPE_NAME = "terra.treasury.v1beta1.Query";

/**
 * TaxRate return the current tax rate
 *
 * @generated from rpc terra.treasury.v1beta1.Query.TaxRate
 */
export const QueryTaxRateService = {
  typeName: TYPE_NAME,
  method: "TaxRate",
  Request: QueryTaxRateRequest,
  Response: QueryTaxRateResponse,
} as const;

/**
 * TaxCap returns the tax cap of a denom
 *
 * @generated from rpc terra.treasury.v1beta1.Query.TaxCap
 */
export const QueryTaxCapService = {
  typeName: TYPE_NAME,
  method: "TaxCap",
  Request: QueryTaxCapRequest,
  Response: QueryTaxCapResponse,
} as const;

/**
 * TaxCaps returns the all tax caps
 *
 * @generated from rpc terra.treasury.v1beta1.Query.TaxCaps
 */
export const QueryTaxCapsService = {
  typeName: TYPE_NAME,
  method: "TaxCaps",
  Request: QueryTaxCapsRequest,
  Response: QueryTaxCapsResponse,
} as const;

/**
 * RewardWeight return the current reward weight
 *
 * @generated from rpc terra.treasury.v1beta1.Query.RewardWeight
 */
export const QueryRewardWeightService = {
  typeName: TYPE_NAME,
  method: "RewardWeight",
  Request: QueryRewardWeightRequest,
  Response: QueryRewardWeightResponse,
} as const;

/**
 * SeigniorageProceeds return the current seigniorage proceeds
 *
 * @generated from rpc terra.treasury.v1beta1.Query.SeigniorageProceeds
 */
export const QuerySeigniorageProceedsService = {
  typeName: TYPE_NAME,
  method: "SeigniorageProceeds",
  Request: QuerySeigniorageProceedsRequest,
  Response: QuerySeigniorageProceedsResponse,
} as const;

/**
 * TaxProceeds return the current tax proceeds
 *
 * @generated from rpc terra.treasury.v1beta1.Query.TaxProceeds
 */
export const QueryTaxProceedsService = {
  typeName: TYPE_NAME,
  method: "TaxProceeds",
  Request: QueryTaxProceedsRequest,
  Response: QueryTaxProceedsResponse,
} as const;

/**
 * Indicators return the current trl informations
 *
 * @generated from rpc terra.treasury.v1beta1.Query.Indicators
 */
export const QueryIndicatorsService = {
  typeName: TYPE_NAME,
  method: "Indicators",
  Request: QueryIndicatorsRequest,
  Response: QueryIndicatorsResponse,
} as const;

/**
 * BurnTaxExemptionList returns all registered burn tax exemption addresses
 *
 * @generated from rpc terra.treasury.v1beta1.Query.BurnTaxExemptionList
 */
export const QueryBurnTaxExemptionListService = {
  typeName: TYPE_NAME,
  method: "BurnTaxExemptionList",
  Request: QueryBurnTaxExemptionListRequest,
  Response: QueryBurnTaxExemptionListResponse,
} as const;

/**
 * Params queries all parameters.
 *
 * @generated from rpc terra.treasury.v1beta1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

