// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/dyncomm/v1beta1/genesis.proto (package terra.dyncomm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./dyncomm_pb.js";

/**
 * GenesisState defines the dyncomm module's genesis state.
 *
 * @generated from message terra.dyncomm.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the paramaters of the module.
   *
   * @generated from field: terra.dyncomm.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated terra.dyncomm.v1beta1.ValidatorCommissionRate validator_commission_rates = 2;
   */
  validatorCommissionRates: ValidatorCommissionRate[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.dyncomm.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "validator_commission_rates", kind: "message", T: ValidatorCommissionRate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * MinDynCommission defines a validator - min commission rate
 * pair to be enforced by the blockchain
 *
 * @generated from message terra.dyncomm.v1beta1.ValidatorCommissionRate
 */
export class ValidatorCommissionRate extends Message<ValidatorCommissionRate> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: string min_commission_rate = 2;
   */
  minCommissionRate = "";

  /**
   * @generated from field: string target_commission_rate = 3;
   */
  targetCommissionRate = "";

  constructor(data?: PartialMessage<ValidatorCommissionRate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.dyncomm.v1beta1.ValidatorCommissionRate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorCommissionRate {
    return new ValidatorCommissionRate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorCommissionRate {
    return new ValidatorCommissionRate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorCommissionRate {
    return new ValidatorCommissionRate().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorCommissionRate | PlainMessage<ValidatorCommissionRate> | undefined, b: ValidatorCommissionRate | PlainMessage<ValidatorCommissionRate> | undefined): boolean {
    return proto3.util.equals(ValidatorCommissionRate, a, b);
  }
}

