// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file vsc/feedistribute/v1/query.proto (package vsc.feedistribute.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
 * method.
 *
 * @generated from message vsc.feedistribute.v1.QueryFeeSharesRequest
 */
export class QueryFeeSharesRequest extends Message<QueryFeeSharesRequest> {
  constructor(data?: PartialMessage<QueryFeeSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.feedistribute.v1.QueryFeeSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSharesRequest {
    return new QueryFeeSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSharesRequest {
    return new QueryFeeSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSharesRequest {
    return new QueryFeeSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSharesRequest | PlainMessage<QueryFeeSharesRequest> | undefined, b: QueryFeeSharesRequest | PlainMessage<QueryFeeSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeSharesRequest, a, b);
  }
}

/**
 * QueryExchangeRateResponse is response type for the
 * Query/ExchangeRate RPC method.
 *
 * @generated from message vsc.feedistribute.v1.QueryFeeSharesResponse
 */
export class QueryFeeSharesResponse extends Message<QueryFeeSharesResponse> {
  /**
   * exchange_rate defines the exchange rate of assets voted by validators
   *
   * @generated from field: string shares = 1;
   */
  shares = "";

  /**
   * @generated from field: string reward_share = 2;
   */
  rewardShare = "";

  /**
   * @generated from field: string burn_share = 3;
   */
  burnShare = "";

  constructor(data?: PartialMessage<QueryFeeSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vsc.feedistribute.v1.QueryFeeSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reward_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "burn_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSharesResponse {
    return new QueryFeeSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSharesResponse {
    return new QueryFeeSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSharesResponse {
    return new QueryFeeSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSharesResponse | PlainMessage<QueryFeeSharesResponse> | undefined, b: QueryFeeSharesResponse | PlainMessage<QueryFeeSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeSharesResponse, a, b);
  }
}

