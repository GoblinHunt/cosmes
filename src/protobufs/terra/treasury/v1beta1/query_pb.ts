// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/treasury/v1beta1/query.proto (package terra.treasury.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./treasury_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryTaxRateRequest is the request type for the Query/TaxRate RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxRateRequest
 */
export class QueryTaxRateRequest extends Message<QueryTaxRateRequest> {
  constructor(data?: PartialMessage<QueryTaxRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxRateRequest {
    return new QueryTaxRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxRateRequest {
    return new QueryTaxRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxRateRequest {
    return new QueryTaxRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxRateRequest | PlainMessage<QueryTaxRateRequest> | undefined, b: QueryTaxRateRequest | PlainMessage<QueryTaxRateRequest> | undefined): boolean {
    return proto3.util.equals(QueryTaxRateRequest, a, b);
  }
}

/**
 * QueryTaxRateResponse is response type for the
 * Query/TaxRate RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxRateResponse
 */
export class QueryTaxRateResponse extends Message<QueryTaxRateResponse> {
  /**
   * @generated from field: string tax_rate = 1;
   */
  taxRate = "";

  constructor(data?: PartialMessage<QueryTaxRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxRateResponse {
    return new QueryTaxRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxRateResponse {
    return new QueryTaxRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxRateResponse {
    return new QueryTaxRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxRateResponse | PlainMessage<QueryTaxRateResponse> | undefined, b: QueryTaxRateResponse | PlainMessage<QueryTaxRateResponse> | undefined): boolean {
    return proto3.util.equals(QueryTaxRateResponse, a, b);
  }
}

/**
 * QueryTaxCapRequest is the request type for the Query/TaxCap RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxCapRequest
 */
export class QueryTaxCapRequest extends Message<QueryTaxCapRequest> {
  /**
   * denom defines the denomination to query for.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTaxCapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxCapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxCapRequest {
    return new QueryTaxCapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxCapRequest {
    return new QueryTaxCapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxCapRequest {
    return new QueryTaxCapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxCapRequest | PlainMessage<QueryTaxCapRequest> | undefined, b: QueryTaxCapRequest | PlainMessage<QueryTaxCapRequest> | undefined): boolean {
    return proto3.util.equals(QueryTaxCapRequest, a, b);
  }
}

/**
 * QueryTaxCapResponse is response type for the
 * Query/TaxCap RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxCapResponse
 */
export class QueryTaxCapResponse extends Message<QueryTaxCapResponse> {
  /**
   * @generated from field: string tax_cap = 1;
   */
  taxCap = "";

  constructor(data?: PartialMessage<QueryTaxCapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxCapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxCapResponse {
    return new QueryTaxCapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxCapResponse {
    return new QueryTaxCapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxCapResponse {
    return new QueryTaxCapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxCapResponse | PlainMessage<QueryTaxCapResponse> | undefined, b: QueryTaxCapResponse | PlainMessage<QueryTaxCapResponse> | undefined): boolean {
    return proto3.util.equals(QueryTaxCapResponse, a, b);
  }
}

/**
 * QueryTaxCapsRequest is the request type for the Query/TaxCaps RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxCapsRequest
 */
export class QueryTaxCapsRequest extends Message<QueryTaxCapsRequest> {
  constructor(data?: PartialMessage<QueryTaxCapsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxCapsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxCapsRequest {
    return new QueryTaxCapsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxCapsRequest {
    return new QueryTaxCapsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxCapsRequest {
    return new QueryTaxCapsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxCapsRequest | PlainMessage<QueryTaxCapsRequest> | undefined, b: QueryTaxCapsRequest | PlainMessage<QueryTaxCapsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTaxCapsRequest, a, b);
  }
}

/**
 * QueryTaxCapsResponseItem is response item type for the
 * Query/TaxCaps RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxCapsResponseItem
 */
export class QueryTaxCapsResponseItem extends Message<QueryTaxCapsResponseItem> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string tax_cap = 2;
   */
  taxCap = "";

  constructor(data?: PartialMessage<QueryTaxCapsResponseItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxCapsResponseItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tax_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxCapsResponseItem {
    return new QueryTaxCapsResponseItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxCapsResponseItem {
    return new QueryTaxCapsResponseItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxCapsResponseItem {
    return new QueryTaxCapsResponseItem().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxCapsResponseItem | PlainMessage<QueryTaxCapsResponseItem> | undefined, b: QueryTaxCapsResponseItem | PlainMessage<QueryTaxCapsResponseItem> | undefined): boolean {
    return proto3.util.equals(QueryTaxCapsResponseItem, a, b);
  }
}

/**
 * QueryTaxCapsResponse is response type for the
 * Query/TaxCaps RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxCapsResponse
 */
export class QueryTaxCapsResponse extends Message<QueryTaxCapsResponse> {
  /**
   * @generated from field: repeated terra.treasury.v1beta1.QueryTaxCapsResponseItem tax_caps = 1;
   */
  taxCaps: QueryTaxCapsResponseItem[] = [];

  constructor(data?: PartialMessage<QueryTaxCapsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxCapsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_caps", kind: "message", T: QueryTaxCapsResponseItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxCapsResponse {
    return new QueryTaxCapsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxCapsResponse {
    return new QueryTaxCapsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxCapsResponse {
    return new QueryTaxCapsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxCapsResponse | PlainMessage<QueryTaxCapsResponse> | undefined, b: QueryTaxCapsResponse | PlainMessage<QueryTaxCapsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTaxCapsResponse, a, b);
  }
}

/**
 * QueryRewardWeightRequest is the request type for the Query/RewardWeight RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryRewardWeightRequest
 */
export class QueryRewardWeightRequest extends Message<QueryRewardWeightRequest> {
  constructor(data?: PartialMessage<QueryRewardWeightRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryRewardWeightRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardWeightRequest {
    return new QueryRewardWeightRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardWeightRequest {
    return new QueryRewardWeightRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardWeightRequest {
    return new QueryRewardWeightRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardWeightRequest | PlainMessage<QueryRewardWeightRequest> | undefined, b: QueryRewardWeightRequest | PlainMessage<QueryRewardWeightRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardWeightRequest, a, b);
  }
}

/**
 * QueryRewardWeightResponse is response type for the
 * Query/RewardWeight RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryRewardWeightResponse
 */
export class QueryRewardWeightResponse extends Message<QueryRewardWeightResponse> {
  /**
   * @generated from field: string reward_weight = 1;
   */
  rewardWeight = "";

  constructor(data?: PartialMessage<QueryRewardWeightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryRewardWeightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardWeightResponse {
    return new QueryRewardWeightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardWeightResponse {
    return new QueryRewardWeightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardWeightResponse {
    return new QueryRewardWeightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardWeightResponse | PlainMessage<QueryRewardWeightResponse> | undefined, b: QueryRewardWeightResponse | PlainMessage<QueryRewardWeightResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardWeightResponse, a, b);
  }
}

/**
 * QueryTaxProceedsRequest is the request type for the Query/TaxProceeds RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxProceedsRequest
 */
export class QueryTaxProceedsRequest extends Message<QueryTaxProceedsRequest> {
  constructor(data?: PartialMessage<QueryTaxProceedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxProceedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxProceedsRequest {
    return new QueryTaxProceedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxProceedsRequest {
    return new QueryTaxProceedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxProceedsRequest {
    return new QueryTaxProceedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxProceedsRequest | PlainMessage<QueryTaxProceedsRequest> | undefined, b: QueryTaxProceedsRequest | PlainMessage<QueryTaxProceedsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTaxProceedsRequest, a, b);
  }
}

/**
 * QueryTaxProceedsResponse is response type for the
 * Query/TaxProceeds RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryTaxProceedsResponse
 */
export class QueryTaxProceedsResponse extends Message<QueryTaxProceedsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tax_proceeds = 1;
   */
  taxProceeds: Coin[] = [];

  constructor(data?: PartialMessage<QueryTaxProceedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryTaxProceedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_proceeds", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTaxProceedsResponse {
    return new QueryTaxProceedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTaxProceedsResponse {
    return new QueryTaxProceedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTaxProceedsResponse {
    return new QueryTaxProceedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTaxProceedsResponse | PlainMessage<QueryTaxProceedsResponse> | undefined, b: QueryTaxProceedsResponse | PlainMessage<QueryTaxProceedsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTaxProceedsResponse, a, b);
  }
}

/**
 * QuerySeigniorageProceedsRequest is the request type for the Query/SeigniorageProceeds RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QuerySeigniorageProceedsRequest
 */
export class QuerySeigniorageProceedsRequest extends Message<QuerySeigniorageProceedsRequest> {
  constructor(data?: PartialMessage<QuerySeigniorageProceedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QuerySeigniorageProceedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySeigniorageProceedsRequest {
    return new QuerySeigniorageProceedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySeigniorageProceedsRequest {
    return new QuerySeigniorageProceedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySeigniorageProceedsRequest {
    return new QuerySeigniorageProceedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySeigniorageProceedsRequest | PlainMessage<QuerySeigniorageProceedsRequest> | undefined, b: QuerySeigniorageProceedsRequest | PlainMessage<QuerySeigniorageProceedsRequest> | undefined): boolean {
    return proto3.util.equals(QuerySeigniorageProceedsRequest, a, b);
  }
}

/**
 * QuerySeigniorageProceedsResponse is response type for the
 * Query/SeigniorageProceeds RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QuerySeigniorageProceedsResponse
 */
export class QuerySeigniorageProceedsResponse extends Message<QuerySeigniorageProceedsResponse> {
  /**
   * @generated from field: string seigniorage_proceeds = 1;
   */
  seigniorageProceeds = "";

  constructor(data?: PartialMessage<QuerySeigniorageProceedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QuerySeigniorageProceedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seigniorage_proceeds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySeigniorageProceedsResponse {
    return new QuerySeigniorageProceedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySeigniorageProceedsResponse {
    return new QuerySeigniorageProceedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySeigniorageProceedsResponse {
    return new QuerySeigniorageProceedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySeigniorageProceedsResponse | PlainMessage<QuerySeigniorageProceedsResponse> | undefined, b: QuerySeigniorageProceedsResponse | PlainMessage<QuerySeigniorageProceedsResponse> | undefined): boolean {
    return proto3.util.equals(QuerySeigniorageProceedsResponse, a, b);
  }
}

/**
 * QueryIndicatorsRequest is the request type for the Query/Indicators RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryIndicatorsRequest
 */
export class QueryIndicatorsRequest extends Message<QueryIndicatorsRequest> {
  constructor(data?: PartialMessage<QueryIndicatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryIndicatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIndicatorsRequest {
    return new QueryIndicatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIndicatorsRequest {
    return new QueryIndicatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIndicatorsRequest {
    return new QueryIndicatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIndicatorsRequest | PlainMessage<QueryIndicatorsRequest> | undefined, b: QueryIndicatorsRequest | PlainMessage<QueryIndicatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryIndicatorsRequest, a, b);
  }
}

/**
 * QueryIndicatorsResponse is response type for the
 * Query/Indicators RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryIndicatorsResponse
 */
export class QueryIndicatorsResponse extends Message<QueryIndicatorsResponse> {
  /**
   * @generated from field: string trl_year = 1;
   */
  trlYear = "";

  /**
   * @generated from field: string trl_month = 2;
   */
  trlMonth = "";

  constructor(data?: PartialMessage<QueryIndicatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryIndicatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trl_year", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trl_month", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIndicatorsResponse {
    return new QueryIndicatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIndicatorsResponse {
    return new QueryIndicatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIndicatorsResponse {
    return new QueryIndicatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIndicatorsResponse | PlainMessage<QueryIndicatorsResponse> | undefined, b: QueryIndicatorsResponse | PlainMessage<QueryIndicatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryIndicatorsResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: terra.treasury.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryBurnTaxExemptionListRequest is the request type for the Query/BurnTaxExemptionList RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryBurnTaxExemptionListRequest
 */
export class QueryBurnTaxExemptionListRequest extends Message<QueryBurnTaxExemptionListRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBurnTaxExemptionListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryBurnTaxExemptionListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnTaxExemptionListRequest {
    return new QueryBurnTaxExemptionListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnTaxExemptionListRequest {
    return new QueryBurnTaxExemptionListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnTaxExemptionListRequest {
    return new QueryBurnTaxExemptionListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnTaxExemptionListRequest | PlainMessage<QueryBurnTaxExemptionListRequest> | undefined, b: QueryBurnTaxExemptionListRequest | PlainMessage<QueryBurnTaxExemptionListRequest> | undefined): boolean {
    return proto3.util.equals(QueryBurnTaxExemptionListRequest, a, b);
  }
}

/**
 * QueryBurnTaxExemptionListResponse is response type for the Query/BurnTaxExemptionList RPC method.
 *
 * @generated from message terra.treasury.v1beta1.QueryBurnTaxExemptionListResponse
 */
export class QueryBurnTaxExemptionListResponse extends Message<QueryBurnTaxExemptionListResponse> {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBurnTaxExemptionListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.QueryBurnTaxExemptionListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnTaxExemptionListResponse {
    return new QueryBurnTaxExemptionListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnTaxExemptionListResponse {
    return new QueryBurnTaxExemptionListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnTaxExemptionListResponse {
    return new QueryBurnTaxExemptionListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnTaxExemptionListResponse | PlainMessage<QueryBurnTaxExemptionListResponse> | undefined, b: QueryBurnTaxExemptionListResponse | PlainMessage<QueryBurnTaxExemptionListResponse> | undefined): boolean {
    return proto3.util.equals(QueryBurnTaxExemptionListResponse, a, b);
  }
}

