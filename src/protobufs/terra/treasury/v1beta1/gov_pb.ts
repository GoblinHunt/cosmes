// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/treasury/v1beta1/gov.proto (package terra.treasury.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * proposal request structure for adding burn tax exemption address(es)
 *
 * @generated from message terra.treasury.v1beta1.AddBurnTaxExemptionAddressProposal
 */
export class AddBurnTaxExemptionAddressProposal extends Message<AddBurnTaxExemptionAddressProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  constructor(data?: PartialMessage<AddBurnTaxExemptionAddressProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.AddBurnTaxExemptionAddressProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBurnTaxExemptionAddressProposal {
    return new AddBurnTaxExemptionAddressProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBurnTaxExemptionAddressProposal {
    return new AddBurnTaxExemptionAddressProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBurnTaxExemptionAddressProposal {
    return new AddBurnTaxExemptionAddressProposal().fromJsonString(jsonString, options);
  }

  static equals(a: AddBurnTaxExemptionAddressProposal | PlainMessage<AddBurnTaxExemptionAddressProposal> | undefined, b: AddBurnTaxExemptionAddressProposal | PlainMessage<AddBurnTaxExemptionAddressProposal> | undefined): boolean {
    return proto3.util.equals(AddBurnTaxExemptionAddressProposal, a, b);
  }
}

/**
 * proposal request structure for removing burn tax exemption address(es)
 *
 * @generated from message terra.treasury.v1beta1.RemoveBurnTaxExemptionAddressProposal
 */
export class RemoveBurnTaxExemptionAddressProposal extends Message<RemoveBurnTaxExemptionAddressProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  constructor(data?: PartialMessage<RemoveBurnTaxExemptionAddressProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.RemoveBurnTaxExemptionAddressProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveBurnTaxExemptionAddressProposal {
    return new RemoveBurnTaxExemptionAddressProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveBurnTaxExemptionAddressProposal {
    return new RemoveBurnTaxExemptionAddressProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveBurnTaxExemptionAddressProposal {
    return new RemoveBurnTaxExemptionAddressProposal().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveBurnTaxExemptionAddressProposal | PlainMessage<RemoveBurnTaxExemptionAddressProposal> | undefined, b: RemoveBurnTaxExemptionAddressProposal | PlainMessage<RemoveBurnTaxExemptionAddressProposal> | undefined): boolean {
    return proto3.util.equals(RemoveBurnTaxExemptionAddressProposal, a, b);
  }
}

