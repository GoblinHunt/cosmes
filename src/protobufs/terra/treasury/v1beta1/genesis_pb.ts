// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/treasury/v1beta1/genesis.proto (package terra.treasury.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./treasury_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the oracle module's genesis state.
 *
 * @generated from message terra.treasury.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: terra.treasury.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: string tax_rate = 2;
   */
  taxRate = "";

  /**
   * @generated from field: string reward_weight = 3;
   */
  rewardWeight = "";

  /**
   * @generated from field: repeated terra.treasury.v1beta1.TaxCap tax_caps = 4;
   */
  taxCaps: TaxCap[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tax_proceeds = 5;
   */
  taxProceeds: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin epoch_initial_issuance = 6;
   */
  epochInitialIssuance: Coin[] = [];

  /**
   * @generated from field: repeated terra.treasury.v1beta1.EpochState epoch_states = 7;
   */
  epochStates: EpochState[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "tax_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tax_caps", kind: "message", T: TaxCap, repeated: true },
    { no: 5, name: "tax_proceeds", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "epoch_initial_issuance", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "epoch_states", kind: "message", T: EpochState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * TaxCap is the max tax amount can be charged for the given denom
 *
 * @generated from message terra.treasury.v1beta1.TaxCap
 */
export class TaxCap extends Message<TaxCap> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string tax_cap = 2;
   */
  taxCap = "";

  constructor(data?: PartialMessage<TaxCap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.TaxCap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tax_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxCap {
    return new TaxCap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxCap {
    return new TaxCap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxCap {
    return new TaxCap().fromJsonString(jsonString, options);
  }

  static equals(a: TaxCap | PlainMessage<TaxCap> | undefined, b: TaxCap | PlainMessage<TaxCap> | undefined): boolean {
    return proto3.util.equals(TaxCap, a, b);
  }
}

/**
 * EpochState is the record for each epoch state
 *
 * @generated from message terra.treasury.v1beta1.EpochState
 */
export class EpochState extends Message<EpochState> {
  /**
   * @generated from field: uint64 epoch = 1;
   */
  epoch = protoInt64.zero;

  /**
   * @generated from field: string tax_reward = 2;
   */
  taxReward = "";

  /**
   * @generated from field: string seigniorage_reward = 3;
   */
  seigniorageReward = "";

  /**
   * @generated from field: string total_staked_luna = 4;
   */
  totalStakedLuna = "";

  constructor(data?: PartialMessage<EpochState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.treasury.v1beta1.EpochState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tax_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "seigniorage_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_staked_luna", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EpochState {
    return new EpochState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EpochState {
    return new EpochState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EpochState {
    return new EpochState().fromJsonString(jsonString, options);
  }

  static equals(a: EpochState | PlainMessage<EpochState> | undefined, b: EpochState | PlainMessage<EpochState> | undefined): boolean {
    return proto3.util.equals(EpochState, a, b);
  }
}

