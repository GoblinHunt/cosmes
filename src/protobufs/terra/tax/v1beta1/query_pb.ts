// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file terra/tax/v1beta1/query.proto (package terra.tax.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";

/**
 * =============================== Params
 *
 * @generated from message terra.tax.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.tax.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message terra.tax.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: terra.tax.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.tax.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message terra.tax.v1beta1.QueryBurnTaxRateRequest
 */
export class QueryBurnTaxRateRequest extends Message<QueryBurnTaxRateRequest> {
  constructor(data?: PartialMessage<QueryBurnTaxRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.tax.v1beta1.QueryBurnTaxRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnTaxRateRequest {
    return new QueryBurnTaxRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnTaxRateRequest {
    return new QueryBurnTaxRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnTaxRateRequest {
    return new QueryBurnTaxRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnTaxRateRequest | PlainMessage<QueryBurnTaxRateRequest> | undefined, b: QueryBurnTaxRateRequest | PlainMessage<QueryBurnTaxRateRequest> | undefined): boolean {
    return proto3.util.equals(QueryBurnTaxRateRequest, a, b);
  }
}

/**
 * @generated from message terra.tax.v1beta1.QueryBurnTaxRateResponse
 */
export class QueryBurnTaxRateResponse extends Message<QueryBurnTaxRateResponse> {
  /**
   * @generated from field: string tax_rate = 1;
   */
  taxRate = "";

  constructor(data?: PartialMessage<QueryBurnTaxRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "terra.tax.v1beta1.QueryBurnTaxRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tax_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnTaxRateResponse {
    return new QueryBurnTaxRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnTaxRateResponse {
    return new QueryBurnTaxRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnTaxRateResponse {
    return new QueryBurnTaxRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnTaxRateResponse | PlainMessage<QueryBurnTaxRateResponse> | undefined, b: QueryBurnTaxRateResponse | PlainMessage<QueryBurnTaxRateResponse> | undefined): boolean {
    return proto3.util.equals(QueryBurnTaxRateResponse, a, b);
  }
}

